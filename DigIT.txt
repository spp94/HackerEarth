#include <bits/stdc++.h>

using namespace std;

long long a,b,k,p,q;

int digits[20];

long long dp[14][10500][160][2];

int digisum(long long x)

{

int res=0;

while(x)

{

res+=x%10;

x/=10;

}

return res;

}

long long naive()

{

long long res=0;
for(long long x=k;x<=b;x+=k)

{

if (x<a)
continue;

int s=digisum(x);

if (s>=p&&s<=q)

++res;

}

return res;

}

long long solve(long long x,long long y)

{

if (x==0)
return 0;

if (y>150)y=150;

for(int i=0;i<=13;i++)

for(int j=0;j<k;j++)

for(int q=0;q<=y;q++)

for(int flag=0;flag<=1;flag++)

dp[i][j][q][flag]=0;

for (int i=0;i<=13;i++)

digits[i]=0;

for (int i=12;i>=0;--i)

{

digits[i]=x%10;

x/=10;

if (x==0)
break;

}

dp[0][0][0][0]=1;

for(int i=0;i<13;i++)

for(int j=0;j<k;j++)

for(int q=0;q<=y;q++)

for(int flag=0;flag<=1;flag++)

if(dp[i][j][q][flag])

for (int new_digit=0;new_digit<=9;new_digit++)

{

if (new_digit>digits[i]&&flag==0)
break;

if(new_digit+q>y)
break;
dp[i+1][(j*10+new_digit)%k][q+new_digit][flag|(new_digit<digits[i])]+=dp[i][j][q][flag];
}
long long answ=0;
for (int i=1;i<=y;i++)
answ+=dp[13][0][i][0]+dp[13][0][i][1];
return answ;

}

int main()
{

cin>>a>>b>>p>>q>>k;

if(k>=10000)
{

cout<<naive()<<endl;

}

else

{
long long res=solve(b,q)-solve(a-1,q)-solve(b,p-1)+solve(a-1,p-1);
cout<<res<<endl;

}

return 0;
}
 