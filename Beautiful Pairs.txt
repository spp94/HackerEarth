import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the beautifulPairs function below.
    static int beautifulPairs(int[] A, int[] B) 
    {
        int[] f1 = new int[1001];
        int[] f2 = new int[1001];
        for(int i = 0; i < A.length; i++)
        {
            f1[A[i]]++;
        }
        for(int i = 0; i < B.length; i++)
        {
            f2[B[i]]++;
        }
        
            int count = 0;
            for(int i = 0; i < 1001; i++)
            {
                if(f1[i] != 0 && f2[i] != 0)
                {
                    count += Math.min(f1[i],f2[i]);
                }
                else
                {
                    continue;
                }
            }
            System.out.println(count+" "+A.length);
            return count == A.length ? count-1 : count+1;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] A = new int[n];

        String[] AItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            int AItem = Integer.parseInt(AItems[i]);
            A[i] = AItem;
        }

        int[] B = new int[n];

        String[] BItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            int BItem = Integer.parseInt(BItems[i]);
            B[i] = BItem;
        }

        int result = beautifulPairs(A, B);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
