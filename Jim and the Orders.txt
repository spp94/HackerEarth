import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the jimOrders function below.
        static int[] jimOrders(int[][] orders) 
    {
      int[] res = new int[orders.length];
      int[][] pos = new int[orders.length][2];

      for(int i = 0; i < orders.length; i++)
      {
          pos[i][0] = orders[i][0];
          pos[i][1] = orders[i][0] + orders[i][1];
      }

      for(int i = 0; i < orders.length; i++)
      {
         for(int j = 0; j < orders.length-1; j++)
         {
             if((orders[j][0] + orders[j][1]) < (orders[j+1][0] + orders[j+1][1]))
             {
                 int temp1 = orders[j][0];
                 int temp2 = orders[j][1];
                 orders[j][0] = orders[j+1][0];
                 orders[j][1] = orders[j+1][1];
                 orders[j+1][0] = temp1;
                 orders[j+1][1] = temp2;

                 //int temp3 = pos[j];
                 //pos[j] = pos[j+1];
                 //pos[j+1] = temp3;

             }
             else if((orders[j][0] + orders[j][1]) == (orders[j+1][0] + orders[j+1][1]))
             {
                 if(orders[j][0] > orders[j+1][0])
                 {
                    int temp1 = orders[j][0];
                    int temp2 = orders[j][1];
                    orders[j][0] = orders[j+1][0];
                    orders[j][1] = orders[j+1][1];
                    orders[j+1][0] = temp1;
                    orders[j+1][1] = temp2;

                    //int temp3 = pos[j];
                    //pos[j] = pos[j+1];
                    //pos[j+1] = temp3;
                 }
                 else
                 {
                    continue;
                 }
             }
             else
             {
                 continue;
             }
         }
      }
        for(int i = 0; i < orders.length; i++)
        {
            for(int j = 0; j < pos.length; j++)
            {
                if(orders[i][0] == pos[j][0] && (orders[i][0]+orders[i][1]) == pos[j][1])
                {
                    res[orders.length - i - 1] = j + 1;
                    break;
                }
            }
        }
        //Arrays.sort(res);
        for(int i = 0; i < res.length-1; i++)
        {
            if(res[i] == res[i+1])
            {
                for(int j = i+1; j < res.length; j++)
                {
                    res[j] = res[j]+1;
                }
            }
        }
        return res;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[][] orders = new int[n][2];

        for (int i = 0; i < n; i++) {
            String[] ordersRowItems = scanner.nextLine().split(" ");
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            for (int j = 0; j < 2; j++) {
                int ordersItem = Integer.parseInt(ordersRowItems[j]);
                orders[i][j] = ordersItem;
            }
        }

        int[] result = jimOrders(orders);

        for (int i = 0; i < result.length; i++) {
            bufferedWriter.write(String.valueOf(result[i]));

            if (i != result.length - 1) {
                bufferedWriter.write(" ");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
